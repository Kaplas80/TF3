{
  "api/TF3.Common.Core.Exceptions.ChecksumMismatchException.html": {
    "href": "api/TF3.Common.Core.Exceptions.ChecksumMismatchException.html",
    "title": "Class ChecksumMismatchException | Translation Framework v3",
    "keywords": "Class ChecksumMismatchException Exception thrown when checksum doesn't match with the expected one. Inheritance Object ChecksumMismatchException Namespace : TF3.Common.Core.Exceptions Assembly : TF3.Core.dll Syntax public class ChecksumMismatchException : Exception Constructors | Improve this Doc View Source ChecksumMismatchException() Initializes a new instance of the ChecksumMismatchException class. Declaration public ChecksumMismatchException() | Improve this Doc View Source ChecksumMismatchException(SerializationInfo, StreamingContext) Initializes a new instance of the ChecksumMismatchException class. Declaration protected ChecksumMismatchException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source ChecksumMismatchException(String) Initializes a new instance of the ChecksumMismatchException class. Declaration public ChecksumMismatchException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source ChecksumMismatchException(String, Exception) Initializes a new instance of the ChecksumMismatchException class. Declaration public ChecksumMismatchException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/TF3.Common.Core.Exceptions.html": {
    "href": "api/TF3.Common.Core.Exceptions.html",
    "title": "Namespace TF3.Common.Core.Exceptions | Translation Framework v3",
    "keywords": "Namespace TF3.Common.Core.Exceptions Classes ChecksumMismatchException Exception thrown when checksum doesn't match with the expected one. UnknownConverterException Exception thrown when a Yarhl converter is not found."
  },
  "api/TF3.Common.Core.Exceptions.UnknownConverterException.html": {
    "href": "api/TF3.Common.Core.Exceptions.UnknownConverterException.html",
    "title": "Class UnknownConverterException | Translation Framework v3",
    "keywords": "Class UnknownConverterException Exception thrown when a Yarhl converter is not found. Inheritance Object UnknownConverterException Namespace : TF3.Common.Core.Exceptions Assembly : TF3.Core.dll Syntax public class UnknownConverterException : Exception Constructors | Improve this Doc View Source UnknownConverterException() Initializes a new instance of the UnknownConverterException class. Declaration public UnknownConverterException() | Improve this Doc View Source UnknownConverterException(SerializationInfo, StreamingContext) Initializes a new instance of the UnknownConverterException class. Declaration protected UnknownConverterException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source UnknownConverterException(String) Initializes a new instance of the UnknownConverterException class. Declaration public UnknownConverterException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source UnknownConverterException(String, Exception) Initializes a new instance of the UnknownConverterException class. Declaration public UnknownConverterException(string message, Exception innerException) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception innerException The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
  },
  "api/TF3.Common.Core.GameScript.html": {
    "href": "api/TF3.Common.Core.GameScript.html",
    "title": "Class GameScript | Translation Framework v3",
    "keywords": "Class GameScript Game script. Includes all the needed info to extract and repack game files. Inheritance Object GameScript Namespace : TF3.Common.Core Assembly : TF3.Core.dll Syntax public class GameScript : object Properties | Improve this Doc View Source Assets Gets or sets the list of translatable assets. Declaration public List<AssetInfo> Assets { get; set; } Property Value Type Description List < AssetInfo > | Improve this Doc View Source Containers Gets or sets the list of containers in the game. Declaration public List<ContainerInfo> Containers { get; set; } Property Value Type Description List < ContainerInfo > | Improve this Doc View Source Game Gets or sets the script game name. Declaration public string Game { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the script name (short name). Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Parameters Gets or sets the list of parameters. Declaration public List<ParameterInfo> Parameters { get; set; } Property Value Type Description List < ParameterInfo > Methods | Improve this Doc View Source ExtractAssets(String, String) Extracts all translatable assets from the game. Declaration public void ExtractAssets(string gamePath, string outputPath) Parameters Type Name Description String gamePath Game install directory. String outputPath Output directory. | Improve this Doc View Source RebuildAssets(String, String, String) Rebuild all translatable assets from the game. Declaration public void RebuildAssets(string gamePath, string translationPath, string outputPath) Parameters Type Name Description String gamePath Game install directory. String translationPath Translation directory. String outputPath Output directory."
  },
  "api/TF3.Common.Core.Helpers.ChecksumHelper.html": {
    "href": "api/TF3.Common.Core.Helpers.ChecksumHelper.html",
    "title": "Class ChecksumHelper | Translation Framework v3",
    "keywords": "Class ChecksumHelper Checksum functions. Inheritance Object ChecksumHelper Namespace : TF3.Common.Core.Helpers Assembly : TF3.Core.dll Syntax public static class ChecksumHelper : object Methods | Improve this Doc View Source Calculate(Stream) Calculate the checksum of a stream. Declaration public static ulong Calculate(Stream stream) Parameters Type Name Description Stream stream The input stream. Returns Type Description UInt64 The checksum value. | Improve this Doc View Source Calculate(String) Calculate the checksum of a file. Declaration public static ulong Calculate(string file) Parameters Type Name Description String file The input file. Returns Type Description UInt64 The checksum value. | Improve this Doc View Source Check(Stream, UInt64) Validates the checksum of a stream. Declaration public static bool Check(Stream stream, ulong expected) Parameters Type Name Description Stream stream The input stream. UInt64 expected The expected checksum value. Returns Type Description Boolean True if checksum matches with the expected value. | Improve this Doc View Source Check(String, UInt64) Validates the checksum of a file. Declaration public static bool Check(string file, ulong expected) Parameters Type Name Description String file The input file. UInt64 expected The expected checksum value. Returns Type Description Boolean True if checksum matches with the expected value."
  },
  "api/TF3.Common.Core.Helpers.html": {
    "href": "api/TF3.Common.Core.Helpers.html",
    "title": "Namespace TF3.Common.Core.Helpers | Translation Framework v3",
    "keywords": "Namespace TF3.Common.Core.Helpers Classes ChecksumHelper Checksum functions. YarhlNodeExtension Node extension methods."
  },
  "api/TF3.Common.Core.Helpers.YarhlNodeExtension.html": {
    "href": "api/TF3.Common.Core.Helpers.YarhlNodeExtension.html",
    "title": "Class YarhlNodeExtension | Translation Framework v3",
    "keywords": "Class YarhlNodeExtension Node extension methods. Inheritance Object YarhlNodeExtension Namespace : TF3.Common.Core.Helpers Assembly : TF3.Core.dll Syntax public static class YarhlNodeExtension : object Methods | Improve this Doc View Source Transform(Node, List<ConverterInfo>, List<ParameterInfo>) Transforms a Yarhl node using a chain of converters. Declaration public static void Transform(this Node node, List<ConverterInfo> converters, List<ParameterInfo> parameters) Parameters Type Name Description Node node The original node. List < ConverterInfo > converters Converters list. List < ParameterInfo > parameters Allowed parameters list. | Improve this Doc View Source Translate(Node, Node, String) Calls a translator converter. Declaration public static void Translate(this Node node, Node translation, string translator) Parameters Type Name Description Node node The original node. Node translation The node with the translation. String translator The translator converter."
  },
  "api/TF3.Common.Core.html": {
    "href": "api/TF3.Common.Core.html",
    "title": "Namespace TF3.Common.Core | Translation Framework v3",
    "keywords": "Namespace TF3.Common.Core Classes GameScript Game script. Includes all the needed info to extract and repack game files. ScriptManager Script manager."
  },
  "api/TF3.Common.Core.Models.AssetInfo.html": {
    "href": "api/TF3.Common.Core.Models.AssetInfo.html",
    "title": "Class AssetInfo | Translation Framework v3",
    "keywords": "Class AssetInfo Game asset info. Inheritance Object AssetInfo Namespace : TF3.Common.Core.Models Assembly : TF3.Core.dll Syntax public class AssetInfo : object Properties | Improve this Doc View Source Extractors Gets or sets the list of converters needed to extract the translatable contents. Declaration public List<ConverterInfo> Extractors { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source Files Gets or sets the list of files in this asset. Declaration public List<FileInfo> Files { get; set; } Property Value Type Description List < FileInfo > | Improve this Doc View Source Id Gets or sets the asset id. Declaration public string Id { get; set; } Property Value Type Description String | Improve this Doc View Source Mergers Gets or sets the list of converters needed to merge the asset files into a single format. Declaration public List<ConverterInfo> Mergers { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source OutputNames Gets or sets the list of output names. Declaration public List<string> OutputNames { get; set; } Property Value Type Description List < String > | Improve this Doc View Source Splitters Gets or sets the list of converters needed to split the asset format into files. Declaration public List<ConverterInfo> Splitters { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source TranslationMergers Gets or sets the list of converters needed to merge the translation files into a single node format. Declaration public List<ConverterInfo> TranslationMergers { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source Translator Gets or sets the name of the translator converter. Declaration public string Translator { get; set; } Property Value Type Description String"
  },
  "api/TF3.Common.Core.Models.ContainerInfo.html": {
    "href": "api/TF3.Common.Core.Models.ContainerInfo.html",
    "title": "Class ContainerInfo | Translation Framework v3",
    "keywords": "Class ContainerInfo Game file container info. Inheritance Object ContainerInfo Namespace : TF3.Common.Core.Models Assembly : TF3.Core.dll Syntax public class ContainerInfo : object Properties | Improve this Doc View Source Checksum Gets or sets the container checksum. If it is 0, it won't be checked. Declaration public ulong Checksum { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source Containers Gets or sets the list of containers in this container. Declaration public List<ContainerInfo> Containers { get; set; } Property Value Type Description List < ContainerInfo > | Improve this Doc View Source Id Gets or sets the container id. Declaration public string Id { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the container name. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Path Gets or sets the container path. Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source Readers Gets or sets the list of converters needed to read the container. Declaration public List<ConverterInfo> Readers { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source Writers Gets or sets the list of converters needed to write the container. Declaration public List<ConverterInfo> Writers { get; set; } Property Value Type Description List < ConverterInfo >"
  },
  "api/TF3.Common.Core.Models.ConverterInfo.html": {
    "href": "api/TF3.Common.Core.Models.ConverterInfo.html",
    "title": "Class ConverterInfo | Translation Framework v3",
    "keywords": "Class ConverterInfo Yarhl converter info. Inheritance Object ConverterInfo Namespace : TF3.Common.Core.Models Assembly : TF3.Core.dll Syntax public class ConverterInfo : object Properties | Improve this Doc View Source ParameterId Gets or sets the converter parameter id. Declaration public string ParameterId { get; set; } Property Value Type Description String | Improve this Doc View Source TypeName Gets or sets the converter type name. Declaration public string TypeName { get; set; } Property Value Type Description String"
  },
  "api/TF3.Common.Core.Models.FileInfo.html": {
    "href": "api/TF3.Common.Core.Models.FileInfo.html",
    "title": "Class FileInfo | Translation Framework v3",
    "keywords": "Class FileInfo Game file info. Inheritance Object FileInfo Namespace : TF3.Common.Core.Models Assembly : TF3.Core.dll Syntax public class FileInfo : object Properties | Improve this Doc View Source Checksum Gets or sets the file checksum. If it is 0, it won't be checked. Declaration public ulong Checksum { get; set; } Property Value Type Description UInt64 | Improve this Doc View Source ContainerId Gets or sets the container id. Declaration public string ContainerId { get; set; } Property Value Type Description String | Improve this Doc View Source Name Gets or sets the file name. Declaration public string Name { get; set; } Property Value Type Description String | Improve this Doc View Source Path Gets or sets the file path (inside the container). Declaration public string Path { get; set; } Property Value Type Description String | Improve this Doc View Source Readers Gets or sets the list of converters needed to read the file. Declaration public List<ConverterInfo> Readers { get; set; } Property Value Type Description List < ConverterInfo > | Improve this Doc View Source Writers Gets or sets the list of converters needed to write the file. Declaration public List<ConverterInfo> Writers { get; set; } Property Value Type Description List < ConverterInfo >"
  },
  "api/TF3.Common.Core.Models.html": {
    "href": "api/TF3.Common.Core.Models.html",
    "title": "Namespace TF3.Common.Core.Models | Translation Framework v3",
    "keywords": "Namespace TF3.Common.Core.Models Classes AssetInfo Game asset info. ContainerInfo Game file container info. ConverterInfo Yarhl converter info. FileInfo Game file info. ParameterInfo Converter parameter info."
  },
  "api/TF3.Common.Core.Models.ParameterInfo.html": {
    "href": "api/TF3.Common.Core.Models.ParameterInfo.html",
    "title": "Class ParameterInfo | Translation Framework v3",
    "keywords": "Class ParameterInfo Converter parameter info. Inheritance Object ParameterInfo Namespace : TF3.Common.Core.Models Assembly : TF3.Core.dll Syntax public class ParameterInfo : object Properties | Improve this Doc View Source Id Gets or sets the parameter id. Declaration public string Id { get; set; } Property Value Type Description String | Improve this Doc View Source TypeName Gets or sets the parameter type name. Declaration public string TypeName { get; set; } Property Value Type Description String | Improve this Doc View Source Value Gets or sets the parameter value. Declaration public object Value { get; set; } Property Value Type Description Object"
  },
  "api/TF3.Common.Core.ScriptManager.html": {
    "href": "api/TF3.Common.Core.ScriptManager.html",
    "title": "Class ScriptManager | Translation Framework v3",
    "keywords": "Class ScriptManager Script manager. Inheritance Object ScriptManager Namespace : TF3.Common.Core Assembly : TF3.Core.dll Syntax public static class ScriptManager : object Properties | Improve this Doc View Source Scripts Gets a list of loaded scripts. Declaration public static IReadOnlyList<GameScript> Scripts { get; } Property Value Type Description IReadOnlyList < GameScript > Methods | Improve this Doc View Source LoadScripts(String) Loads all the scripts in a directory. Declaration public static void LoadScripts(string path) Parameters Type Name Description String path The directory containing the scripts."
  },
  "api/TF3.Common.Core.Yaml.html": {
    "href": "api/TF3.Common.Core.Yaml.html",
    "title": "Namespace TF3.Common.Core.Yaml | Translation Framework v3",
    "keywords": "Namespace TF3.Common.Core.Yaml Classes ParameterInfoTypeConverter YamlDotNet type converter for ParameterInfo."
  },
  "api/TF3.Common.Core.Yaml.ParameterInfoTypeConverter.html": {
    "href": "api/TF3.Common.Core.Yaml.ParameterInfoTypeConverter.html",
    "title": "Class ParameterInfoTypeConverter | Translation Framework v3",
    "keywords": "Class ParameterInfoTypeConverter YamlDotNet type converter for ParameterInfo. Inheritance Object ParameterInfoTypeConverter Namespace : TF3.Common.Core.Yaml Assembly : TF3.Core.dll Syntax public class ParameterInfoTypeConverter : IYamlTypeConverter Methods | Improve this Doc View Source Accepts(Type) Declaration public bool Accepts(Type type) Parameters Type Name Description Type type Returns Type Description Boolean | Improve this Doc View Source ReadYaml(IParser, Type) Declaration public object ReadYaml(IParser parser, Type type) Parameters Type Name Description IParser parser Type type Returns Type Description Object | Improve this Doc View Source WriteYaml(IEmitter, Object, Type) Declaration public void WriteYaml(IEmitter emitter, object value, Type type) Parameters Type Name Description IEmitter emitter Object value Type type"
  },
  "api/TF3.Core.Converters.FormatToSingleNode.html": {
    "href": "api/TF3.Core.Converters.FormatToSingleNode.html",
    "title": "Class FormatToSingleNode | Translation Framework v3",
    "keywords": "Class FormatToSingleNode Converts a IFormat to a NodeContainerFormat. Inheritance Object FormatToSingleNode Implements IInitializer < String > Namespace : TF3.Core.Converters Assembly : TF3.Core.dll Syntax public class FormatToSingleNode : IConverter<IFormat, NodeContainerFormat>, IInitializer<string> Methods | Improve this Doc View Source Convert(IFormat) Convert a format to a single node NodeContainerFormat. Declaration public NodeContainerFormat Convert(IFormat source) Parameters Type Name Description IFormat source A format. Returns Type Description NodeContainerFormat The 'single node' NodeContainerFormat. | Improve this Doc View Source Initialize(String) Set the node name. Declaration public void Initialize(string parameters) Parameters Type Name Description String parameters Node name. Implements IInitializer<>"
  },
  "api/TF3.Core.Converters.html": {
    "href": "api/TF3.Core.Converters.html",
    "title": "Namespace TF3.Core.Converters | Translation Framework v3",
    "keywords": "Namespace TF3.Core.Converters Classes FormatToSingleNode Converts a IFormat to a NodeContainerFormat. SingleNodeToFormat Converts a NodeContainerFormat to the format of the first children."
  },
  "api/TF3.Core.Converters.SingleNodeToFormat.html": {
    "href": "api/TF3.Core.Converters.SingleNodeToFormat.html",
    "title": "Class SingleNodeToFormat | Translation Framework v3",
    "keywords": "Class SingleNodeToFormat Converts a NodeContainerFormat to the format of the first children. Inheritance Object SingleNodeToFormat Namespace : TF3.Core.Converters Assembly : TF3.Core.dll Syntax public class SingleNodeToFormat : IConverter<NodeContainerFormat, IFormat> Methods | Improve this Doc View Source Convert(NodeContainerFormat) Convert a NodeContainerFormat to the format of the first children. Declaration public IFormat Convert(NodeContainerFormat source) Parameters Type Name Description NodeContainerFormat source A 'single node' NodeContainerFormat. Returns Type Description IFormat The format of the node."
  },
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing to the project | Translation Framework v3",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the DotNet Runtime coding style . File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types."
  },
  "dev/Changelog.html": {
    "href": "dev/Changelog.html",
    "title": "vNext (December 20, 2020) | Translation Framework v3",
    "keywords": "vNext (December 20, 2020) As part of this release we had 5 issues closed. Enhancements #5 Move plugins to new projects #4 Use scripts #3 Read and write ARMP files #2 Read and write PAR archives #1 Read and Write Yakuza PAR archives"
  },
  "guides/Contributing.html": {
    "href": "guides/Contributing.html",
    "title": "Contributing to the project | Translation Framework v3",
    "keywords": "Contributing to the project Thanks for taking the time to contribute! ✨ In this document you will find all the information you need to make sure the project continues to be the high-quality product we want to be! Reporting issues Issues When reporting a problem, be as specific as possible. Ideally, you should provide an small snippet of code that reproduces the issue. Try to provide also the following information: OS: Linux / Windows / Mac OS Runtime: .NET Framework, Mono, .NET Core Version of the product Stacktrace if any What's happening and what you expect to happen Features If you want to ask for a new feature, first make sure it hasn't been reported yet by using the search box in the issue tab. Make sure that the feature aligns with the direction of the project. Pull Request Before starting a pull request, create an issue requesting the feature you would like to see and implement. If you are fixing a bug, create also an issue to be able to track the problem. State that you would like to work on that. The team will reply to the issue as soon as possible, discussing the proposal if needed. This guarantee that later on the Pull Request we don't reject the proposal without having a discussion first and we don't waste time. In general, the process to create a pull request is: Create an issue describing the bug or feature and state you would like to work on that. The team will cheer you and/or discuss with you the issue. Fork the project. Clone your forked project and create a git branch. Make the necessary code changes in as many commits as you want. The commit message should follow this convention: :emoji: Short description #IssueID Long description if needed. Create a pull request. After reviewing your changes and making any new commits if needed, the team will approve and merge it. For a complete list of emoji description see this repository . Code Guidelines We follow the DotNet Runtime coding style . File headers ✔️ DO put the license in the file header with this format: // // <FileName>.cs // // Author: // <AuthorName> <email@example.com> // // Copyright (c) <Year> <AuthorName> // // Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the \"Software\"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions: // // The above copyright notice and this permission notice shall be included in // all copies or substantial portions of the Software. // // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN // THE SOFTWARE. Usings ✔️ DO put the using inside the namespace. ✔️ DO include all the namespaces you are using. ✔️ DO use the using statement for IDisposable types."
  },
  "guides/First-Steps.html": {
    "href": "guides/First-Steps.html",
    "title": "First steps | Translation Framework v3",
    "keywords": "First steps Welcome to this project!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Translation Framework v3 (Powered by Yarhl) | Translation Framework v3",
    "keywords": "Translation Framework v3 (Powered by Yarhl ) WIP - NOTHING TO SEE HERE Meanwhile, use Translation Framework v2 Credits Thanks to Pleonex for Yarhl and PleOps.Cake . Icon by Papirus Development Team ."
  },
  "README.html": {
    "href": "README.html",
    "title": "Translation Framework v3 (Powered by Yarhl) | Translation Framework v3",
    "keywords": "Translation Framework v3 (Powered by Yarhl ) WIP - NOTHING TO SEE HERE Meanwhile, use Translation Framework v2 Credits Thanks to Pleonex for Yarhl and PleOps.Cake . Icon by Papirus Development Team ."
  }
}